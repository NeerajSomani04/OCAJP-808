Chapter 1 - Java Basics
  - structure of java class
  - executable java application with main method, CLI, and consol output.
  - import java packages 
  - apply access modifier (private, public, protected, default)
  - use of abstract classes and interfaces
  - static keywords to methods and fields
  - few imp features of java components
  
  Java analogy with Organization
  - organizations hirarchical  structure and components =  Java's class hirarchical structure and components
  - organizations department = java packages
  - Restriction in Organizations data = java's access modifier
  - organizations special priviledges = java's non-access modifier
  
  first topic -- structure of java class
    java source code file -- Person.java
    java bytecode file -- Person.class (compiled code for JVM) -- compiled by java compiler
    
  Java class components --
    1. package statements -- 
      package statement must be the first statement in the java class, if specified. only exception is comments. comments can be first line and package statement can come after that.
      package contains java classes, if not explicitly defined then java class becomes part of default package, which doesn't have name.
      classes and interfaces within same package can be used without prefixing their name with package name, but if used from another package then fully qualified name is required, like, "java.lang.String".
        -- to avoid writting fully qualified names repeteadly, we can use import statements to import packages and their classes.
      
      following are few compile errors related to package statements:
        a. package statments can't be placed with in class curly braces, or after class definition. code wouldn't compile.
        b. a class can't define multiple package statements
        
   2. import statements --
      this always comes after package statement but before class definition.
      if order of this statment changes then code will not compile.
   
   3. comments --
      are used to describe or add comments to code.
      comments can precede package statement.
      two way can be implemented --
        a. multiline comment --> /* to start , */ to end
        b. single line comment --> //
        c. special type commenting to create API documentation --> /** to start, */ to end

   4. class definition {
      variables
      comments 
      constructors 
      methods
      nested classes -- not included in this exam and book
      nested interfaces -- not included in this exam and book
      ENUM -- not included in this exam and book
    }
    
    class declaration -->
      a class declaration composed of following parts -->
        1. access modifier
        2. non-access modifier
        3. class name
        4. name of base class if class extends another class
        5. interfaces
        6. class body within curly braces { }
        
        example --> 
        
        public final class Runner extends Person implements Athlete { }
        
        description of each word in above statemnet:
        public --> Access modifier (optional)
        final --> non-access modifier (optional)
        class --> class Keyword (compulsory)
        Runner --> class name (compulsory)
        extends --> keyword (optional)
        Person --> Base class name  (optional)
        implements --> keyword for interface (optional)
        Athlete --> interface name (optional)
        { } --> (compulsory)
        
     class definition --> design used to specify the attributes and behavior of an object. Hence, an object can be created from a class.
            attributes of an objects are implemented using variables
            behavior is implemented using methods
     variables --> used to store the state of an object (also known as instance)
        each object has its own copy instance variables, values associated with it
        instance variables are define within a class but outside all method of class
     methods --> used to generally manipulate instance / static variables.
     constructors --> used to create and initialize an object of a class.
        A class can have multiple constructors, but can accept different set of method parameters.
     
     interface --> specifies a contract for the class to implement.
        -> its a grouping of related methods and constants.
        --> prior to java 8 interface methods are implicitly abstract.
          but with Java 8, method in an interface can define default implementation.
            interface can even define static methods.
       
       Analogy for interface -->
        Television  == a class
        volume and channel controls of TV = Interface named as "controls"
        means, every TV has same functionality of changing channel and increase/decrease volume.
        
      
      Exam tips -- A Java source code file can contain -->
        1. a single class
        2. single or multiple interfaces
        3. single or multiple classes or interfaces. No perticular order is mendatory.
        4. public class or public interface name must match java source code file name. Not doing so leads to compile error.
        5. One ".java" source code file = one public class or one public interface. can't have more than one. Not doing so leads to compile error.
        6. classes and interfaces defined in source code file can't be defined in multiple packages.
        7. import statement in source code file will apply to all classes and interfaces within file.
        
        
    Twist in the Tale --> 1.1 --> option (c) and (d)
    Twist in the Tale --> 1.2 --> option (a) , (c) and (d)
     
 1.2 -- executable java applications
  what makes a regular java class an executable java class.
  execuatble classes (with main menthod) vs non-executable classes (without main method)
    --> A java application can define more than one executable classes but JVM uses only one as per instruction of code. 
   
  Rules for main method -->
      - must be marked as public
      - must be marked as static
      - name must be "main"
      - return type must be void
      - method aurgument String array or String variable aurgument (varargs).
      
      Some compile error scenarios -->
        public static void main(String... args) --> its valid statement
        public static void main(String args...) --> its invalid statement, because ellipsis (...) should not follow variable name.
        public static void main(String[] arguments) --> its valid statement
        public static void main(String HelloWorld[]) --> its valid statement
        static public void main(String HelloWorld[]) --> its valid statement, keywords "public" and "static" are inter-changable
       
    Example for running java code with main method -->
    HelloWorld.java file code -->
      class HelloWorld {
          public static void main(String args[]) {
            System.out.println(args[0]);
            System.out.println(args[1]);
          }
        }
    Execution on CLI --> java HelloWorld 1 2
    Result --> 1
               2
    explanation --> 1 and 2 are the arguments for the main method of class.
    
    Exam Tip --> values written after keyword "java" and classname will be passed to main method. not the keyword "java" or classname.
    
    Twist in the Tale --> 1.3 --> option (a) , (b)

  1.3 - Java Packages -->
    1. What are java packages and its need? 
        --> to group together set of classes and interfaces
        --> also provides access protection and namespace management
        --> this can be defined in a java source code file as first line of code in the file
        --> each package can contain other packages known as subpackages.
    2. Difference between classes defined in java packages and classes without java packages

  Rules about package names -->
    1. all lowercase letters
    2. package and subpackages are seperated by dot (.)
    
 Points to remember -->
  1. Need to set CLASSPATH of JRE, inorder for JRE to find these packages. Classpath is the directory base location where .java source code file exsits with proper packages/subpackages directory hirarchy.
    example, : (C:\MyCode)
 
Exam Tip -->   
      a. No need to explicitely mention import statement for members from java.lang package.
      b. you can't use the import statement to access multiple classes or interfaces with the same name from different packages.
       
       for example --> 
       
          1. Java Date class is defined in 2 packages and we need to use fully qualified name for both inorder to use both
           class AnnualExam {
            java.util.Date date1;   
            }
            
           2. alternative valid approach
            import java.util.Date;
            class AnnualExam {
             java.sql.Date date2;
             }
             
         3. below code will give compile error -->
           import java.util.Date;
           import java.sql.Date;
           class AnnualExam { }
           
      c. Members of a named package can't access classes and interfaces defined in the default package. 
          In other words, A class from a default package can't be used in named package class, regardless of same directory of not.
           
      d. In-order to import only static methods and variables, we can use import static statements. This feature is called static import but the correct command is "import static". example:- import static certification.ExamQuestion.marks;  
      

1.4 Java Access modifier -->
      helps to limit access to java class, interfaces, and there members (methods and variables)
        4 types -->
        public (least restrictive) --> can be accessed by classes of same packages or seperate packages.
        protected --> 
          A derived class inherit the protected members of its base class irrespective of the packages in which they are defined.
          
        default -->
        
        private (most restrictive) -->
        
     Local variables, and method parameters cann't be defined using access modifier.
     
 1.6 - Non-Access Modifiers -->
  Exam Tips -->
    Abstract --> 
      --> An abstract class may or may not define an abstract method, but a concrete class can't define an abstract method.
      --> An interface is an abstract entity by default. Abstract keyword will be added by Java compiler.
      --> Abstract method doesn't have a body. Note:- A method with an empty body is not an abstract method.
      --> abstract keyword doesn't apply to variables. Code wouldn't compile.
    final -->
      valid with class, method and variables. || invalid with Interface
      final class --> can't be extended by another class
      final variable --> can't allow reassignment of value to variable, value can be assigned one time only.
          --> on final variable we can call method to assign some value to it and that might chnage its state, but can't reassign another object to the final variable.
      final method --> final method defined in base class can't be overridden in derived class.
    Static --> valid for variables, methods, classes, interfaces.
      static variables belong to a class. Same value of static variable will be shared across all objects of class.
      static variable also known as shared variable. 
  
