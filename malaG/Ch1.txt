Chapter 1 - Java Basics
  - structure of java class
  - executable java application with main method, CLI, and consol output.
  - import java packages 
  - apply access modifier (private, public, protected, default)
  - use of abstract classes and interfaces
  - static keywords to methods and fields
  - few imp features of java components
  
  Java analogy with Organization
  - organizations hirarchical  structure and components =  Java's class hirarchical structure and components
  - organizations department = java packages
  - Restriction in Organizations data = java's access modifier
  - organizations special priviledges = java's non-access modifier
  
  first topic -- structure of java class
    java source code file -- Person.java
    java bytecode file -- Person.class (compiled code for JVM) -- compiled by java compiler
    
  Java class components --
    1. package statements -- 
      package statement must be the first statement in the java class, if specified. only exception is comments. comments can be first line and package statement can come after that.
      package contains java classes, if not explicitly defined then java class becomes part of default package, which doesn't have name.
      classes and interfaces within same package can be used without prefixing their name with package name, but if used from another package then fully qualified name is required, like, "java.lang.String".
        -- to avoid writting fully qualified names repeteadly, we can use import statements to import packages and their classes.
      
      following are few compile errors related to package statements:
        a. package statments can't be placed with in class curly braces, or after class definition. code wouldn't compile.
        b. a class can't define multiple package statements
        
   2. import statements --
      this always comes after package statement but before class definition.
      if order of this statment changes then code will not compile.
   
   3. comments --
      are used to describe or add comments to code.
      comments can precede package statement.
      two way can be implemented --
        a. multiline comment --> /* to start , */ to end
        b. single line comment --> //
        c. special type commenting to create API documentation --> /** to start, */ to end

   4. class definition {
      variables
      comments 
      constructors 
      methods
      nested classes -- not included in this exam and book
      nested interfaces -- not included in this exam and book
      ENUM -- not included in this exam and book
    }
    
    class declaration -->
      a class declaration composed of following parts -->
        1. access modifier
        2. non-access modifier
        3. class name
        4. name of base class if class extends another class
        5. interfaces
        6. class body within curly braces { }
        
        example --> 
        
        public final class Runner extends Person implements Athlete { }
        
        description of each word in above statemnet:
        public --> Access modifier (optional)
        final --> non-access modifier (optional)
        class --> class Keyword (compulsory)
        Runner --> class name (compulsory)
        extends --> keyword (optional)
        Person --> Base class name  (optional)
        implements --> keyword for interface (optional)
        Athlete --> interface name (optional)
        { } --> (compulsory)
        
     class definition --> design used to specify the attributes and behavior of an object. Hence, an object can be created from a class.
            attributes of an objects are implemented using variables
            behavior is implemented using methods
     variables --> used to store the state of an object (also known as instance)
        each object has its own copy instance variables, values associated with it
        instance variables are define within a class but outside all method of class
     methods --> used to generally manipulate instance / static variables.
     constructors --> used to create and initialize an object of a class.
        A class can have multiple constructors, but can accept different set of method parameters.
     
     interface --> specifies a contract for the class to implement.
        -> its a grouping of related methods and constants.
        --> prior to java 8 interface methods are implicitly abstract.
          but with Java 8, method in an interface can define default implementation.
            interface can even define static methods.
       
       Analogy for interface -->
        Television  == a class
        volume and channel controls of TV = Interface named as "controls"
        means, every TV has same functionality of changing channel and increase/decrease volume.
        
      
      Exam tips -- A Java source code file can contain -->
        1. a single class
        2. single or multiple interfaces
        3. single or multiple classes or interfaces. No perticular order is mendatory.
        4. public class or public interface name must match java source code file name. Not doing so leads to compile error.
        5. One ".java" source code file = one public class or one public interface. can't have more than one. Not doing so leads to compile error.
        
        
     
        
       
