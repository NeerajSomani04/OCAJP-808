Chapter 2 -- Operators and Statements

--- Understanding Java Operators --
it is a special symbol that can be applied to a set of variables, values, or literals—referred to as operands—and that returns a result.
3 types --> unary, binary, and ternary
Java operators are not necessarily evaluated from left-to-right order.

Unless overridden with parentheses, Java operators follow order of operation from higher-to-lower precedence.
If two operators have the same level of precedence, then Java guarantees left-to-right evaluation.

Order of operator     precedence
Operator   ----------->      Symbols and examples
Post-unary operators   ----------->       expression++, expression--
Pre-unary operators   ----------->       ++expression, --expression
Other unary operators   ----------->       +, -, !
Multiplication/Division/Modulus   ----------->       *, /, %
Addition/Subtraction   ----------->      +, -
Shift operators   ----------->      <<, >>, >>>  (// not in OCA exam)
Relational operators   ----------->      <, >, <=, >=, instanceof
Equal to/not equal to   ----------->      ==, !=
Logical operators   ----------->      &, ^, |
Short-circuit logical operators   ----------->      &&, ||
Ternary operators   ----------->      boolean expression ? expression1 : expression2
Assignment operators   ----------->      =, +=, -=, *=, /=, %=, &=, ^=, !=, <<=, >>=, >>>=


---- Working with Binary Arithmetic Operators --> used to perform mathematical operations on variables, create logical expressions, as well as perform basic variable assignments.

  --- Arithmetic Operators -->  include addition (+), subtraction (-), multiplication (*), division (/), and modulus (%)
, include the unary operators, ++ and --.
the multiplicative operators (*, /, %) have a higher order of precedence than the additive operators (+, -).
you can change the order of operation explicitly by wrapping parentheses around the sections you want evaluated first.

arithmetic operators may be applied to any Java primitives, except boolean and String
only the addition operators + and += may be applied to String values, which results in String concatenation.
The modulus (%), or remainder operator, is simply prints the remainder when two numbers are divided.

For integer values, division results in the floor value of the nearest integer that fulfi lls the operation, whereas modulus is the remainder value. 
For a given divisory, which is 3 in these examples, the modulus operation results in a value between 0 and (y - 1) for positive dividends. This means that the result of a modulus operation is always 0, 1, or 2.
Example: 
System.out.print(10 / 3); // Outputs 3
System.out.print(10 % 3); // Outputs 1

-- Numeric Promotion -->  Numeric Promotion Rules
    1. If two values have different data types, Java will automatically promote one of the values to the larger of the two data types.
    2. If one of the values is integral and the other is floating-point, Java will automatically promote the integral value to the floating-point value’s data type.
    3. Smaller data types, namely byte, short, and char, are first promoted to int any time they’re used with a Java binary arithmetic operator, even if neither of the operands is int. For the third rule, note that unary operators are excluded from this rule. For example, applying ++ to a short value results in a short value.
    4. After all promotion has occurred and the operands have the same data type, the resulting value will have the same data type as its promoted operands.

Need to remember below tricky question:-
Q:-  What is the data type of x + y?
      double x = 39.21;
      float y = 2.1;
Answer:- Code will give compile error
Reason:- floating-point literals are assumed to be double, unless postfi xed with an f, as in 2.1f.
    If y = 2.1f, then it will be promoted to double while calculating the expression.
Q:- What is the data type of x / y?
      short x = 10;
      short y = 3;
Answer:- the output data type would be "int". as per 3rd rule.

---- Working with Unary Operators ---> a unary operator is one that requires exactly one operand, or variable, to function.
    they often perform simple tasks, such as increasing a numeric variable by one, or negating a boolean value.
    Unary operator ------> Description
        + ------>  Indicates a number is positive, although numbers are assumed to be positive in Java unless accompanied by a negative unary operator.
        - -----> Indicates a literal number is negative or negates an expression
        ++ -----> Increments a value by 1
        -- ------> Decrements a value by 1
        ! ------> Inverts a Boolean’s logical value

----- Logical Complement and Negation Operators ----> The logical complement operator, !, fl ips the value of a boolean expression.

Imp rule to remember ---> you cannot apply a negation operator, -, to a boolean expression, nor can you apply a logical complement operator, !, to a numeric expression.








switch statement 
Data types supported by switch statements include the following:
■ int and Integer wrapper class
■ byte and Byte wrapper class
■ short and Short wrapper class
■ char and Character wrapper class
■ String
■ enum values

Note that boolean and long, and their associated wrapper classes, are not supported by switch statements.

default block --> if there is no matching case value for the switch statement, regardless of its position.

the data type for case statements must all match the data type of the switch variable.
the case statement value must be a literal, enum constant, or final constant variable.

Review questions:- Attempt 1
1. A, D
2. A, B, D, E, F (N)
3. F 
4. B, C, F (N)
5. C
6. F
7. F (N)
8. D (N)
9. B (N)
10. C (N)
11. A
12. D
13. A
14. C
15. E
16. E (N)
17. D 
18. B (N)
19. D 
20. C (N)
