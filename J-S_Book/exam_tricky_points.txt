-- from ch 2 -->
1. questions on the exam that try to apply a logical complement operator, !, to a numeric expression, and a negation operator, -, to a boolean expression. cause the code to fail to compile.
2. pay attention to questions that use Increment and decrement operators, ++ and --, on the same variable multiple time in same statement.
3. short-circuit operators or conditional operators, && and ||, --> the right-hand side of the expression may never be evaluated if the final result can be determined by the left-hand side of the expression.
4. Pay close attention to the data types when you see an equality operator (== and !=) on the exam. The exam creators also have a habit of mixing assignment operators and equality operators.
5. during the OCA exam, you may be pre- sented with classnames that are unfamiliar, such as File. Many times you can answer ques- tions about these classes without knowing the specific details of these classes. 
6. exam writers trick on if-then statements without braces ({}). 
  In below example, print statement will run only when if condition satisfied. but incrementing variable will always run, not dependent on if statement.
if(hourOfDay < 11) 
  System.out.println("Good Morning"); 
  morningGreetingCount++;
7. Another exam writers trick on if-then statements is, providing code where the boolean expression inside the if-then statement is not actually a boolean expression. For example,
int x = 1;
if(x) { // DOES NOT COMPILE
....
}
8. No paranthesis applied to ternary oprator expression, as its an optional. 
9. exam tricks --> only one of the right-hand expressions of the ternary operator will be evaluated at runtime. Means, if boolean expression is true then 1st expression will only evaluate at run-time and if boolean expression is false then 2nd expression.
Its very similar to short-circuit operators.
int x = y<10 ? y++ : z++; // only one will increment, either y or z based on y value
10. The exam creators are fond of switch examples that are missing break statements! on the exam, always consider that multiple branches
may be visited in a single execution.
11. Be wary of any exam questions in which a variable declared within the initialization block of a for loop is available outside the loop.
12. Need to understand the traditional difference between List and Array
** 13. "break;" statements are not allowed in if-else statement directly, means its allowed on all loops (do, for, while) and switch statements. Understand few things here carefully, if-else and switch are statements not loops, but (do, for, while) are loops and not statements. Hence, if you use break; statement directly in if-else statement, code will not compile but if you use break; statement in if-else statement, which is inside a for loop (like, a nested loop), then this break statement will apply on for loop and code will run properly.

-- from ch 3 ---->
1. OCA exam creators like string concatenation because the + operator can be used in two ways within the same line of code. (addition and concatenation)
2. String is immutable, means cant be changed once created. Exam will trick you with concate method, but dont get tricked. Example:
String s1 = "1"; 
String s2 = s1.concat("2");
s2.concat("3");
System.out.println(s2); \\ it will print "12", as string is immutable. s1 can't be changed but s2 is object created using String methods. Hence, s2 can be changed but we need to assign an method output back to variable so that it gets updated.
Remember, left-side is reference pointing to objects created on right-side. Hence, in every assignement a new String object is created and assigned to String reference and the old object becomes eligible for garbage collection.
3. The substring() method is the trickiest String method on the exam.
4. The exam will likely try to trick you with respect to String being immutable and StringBuilder being mutable.
5. stringBuilder insert method --> The exam creators will try to trip you up on this. As we add and remove characters, their indexes change. When you see a question dealing with such operations, draw what is going on so you wonâ€™t be confused.
6. Remember, IndexOutofBound exceptions are very common scenarios for exam when using StringBuilder methods.
7. pay attention to object reference, while creating object using String class or the Class in which it is used. like Tiger class. Since, Tiger class did't implement equals method, object comparison "t1.equals(t2)" results false.
8. for an array, The exam will test whether you are being observant by trying to access elements that are not in the array. why,  there can be ArrayIndexOutOfBoundsException will be thrown.
9. binarySearch for unsorted array means result will be unpredictable output.
10. arrayList method signature important for exam. In exam, note on paper to keep track of items in ArrayList.
11. 
