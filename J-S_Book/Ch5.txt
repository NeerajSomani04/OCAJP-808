Chapter 5 -- Class Design
Proper Java class design is about code reusability, increased functionality, and standardization.

------- Introducing Class Inheritance --> Inheritance is the process by which the new child subclass automatically includes any public or protected primitives, objects, or methods defined in the parent class.
    Java supports single inheritance, by which a class may inherit from only one direct parent class. Java does allow one exception to the single inheritance rule: classes may implement multiple interfaces.
Each child has exactly one parent, but one parent can have multiple children.

Java doesn’t support multiple inheritance. Although, Java also supports multiple levels of inheritance. means one class (X) inherit other class (Y) and that class (Y) can inherit another class (Z), then (X) is considered indirect child of (Z).

It is possible in Java to prevent a class from being extended by marking the class with the final modifier. If you try a class that inherits from a final class, code does not compile.

--- Extending a Class --> using the extends keyword, adding the parent class name in the definition of child class. Example below:
    public abstract class ElephantSeal extends Seal {
        // Methods and Variables defined here
    }

    --> Java allows only one or zero public class or interface per file.
    --> any private members of parent class is not accessible directly to child class, but using object reference we can fetch private members. (need to check how to fetch private members)
    
--- Applying Class Access Modifiers --> 4 types (public, private, protected, default)
     --> all 4 can be applied to memebers of class.
     --> only public and default can be applied to class definition. (for OCA exam)
  The public access modifier --> class and its memebers can be accessible from anywhere.
  The default (package private) modifier -->  indicates the class can be accessed only by a subclass or class within the same package.
  
  --> There can be only one public class in a .java file. Remember, .java filename must match that public class name. Here, public class can be child or parent.
  example:- class Rodent {}
            public class Groundhog extends Rodent {}

---> The rules for applying class access modifiers are identical for interfaces.

----- Creating Java Objects ---> In Java, all classes inherit from a single class, java.lang.Object. 
  java.lang.Object is the only class that doesn’t have any parent classes. This is top most class in java.
  Hence, basically every class extends another class. If you don't specifically extend a class then the compiler extends java.lang.Object class. Hence, all classes inherit from java.lang.Object.
  
----- Defining Constructors --> every class has at least one constructor, if no constructor is declared, the compiler will automatically insert a default no argument constructor. 
    In Java, the first statement of every constructor is either a call to another constructor within the class, using this(), or a call to a constructor in the direct parent class, using super(). If a parent constructor takes arguments, the super constructor would also take arguments.
    Like the this() command, the super() command may only be used as the first statement of the constructor. code will not compile if this condition doesn't meet.
    example:-   public class Zoo {
                    public Zoo() {
                        super();
                        System.out.println("Zoo created");
                        super(); // DOES NOT COMPILE, it can only be first statement
                    }
                }

If the parent class has more than one constructor, the child class may use any valid parent constructor in its definition.

---- Understanding Compiler Enhancements ---> Java compiler automatically inserts a call to the no-argument constructor super() if the first statement is not a call to the parent constructor.
    Subclasses may define no-argument constructors even if their parent classes do not, provided the constructor of the child maps to a parent constructor via an explicit call of the super() command.

----- Reviewing Constructor Rules --> Constructor Definition Rules:
1. The first statement of every constructor is a call to another constructor within the class using this(), or a call to a constructor in the direct parent class using super().
2. The constructor call {super() or this()} may not be used after the first statement of the constructor.
3. If no super() call is declared in a constructor, Java will insert a no-argument super() as the first statement of the constructor.
4. If the parent doesn’t have a no-argument constructor and the child doesn’t define any constructors, the compiler will throw an error and try to insert a default no-argument constructor into the child class.
5. If the parent doesn’t have a no-argument constructor, the compiler requires an explicit call to a parent constructor in each child constructor.
    
------ Calling Constructors --> In Java, the parent constructor is always executed before the child constructor.
---- Calling Inherited Class Members -->  If the parent class and child class are part of the same package, 
        the child class may also use any default members defined in the parent class.
        A child class may never access a private member of the parent class, at least not through any direct reference.
    
    if a class extends another class, then the child class can access members of parent class by using either this or super keyword. 
    but "this" is used for acceessing members of child class only.
    
    Remember, if the child class overrides a member of the parent class, this and super could have very different effects when applied to a class member.
    
exam trick 4 --> When you see super() or super on the exam, be sure to check that they are being used correctly. The exam may try to trick you by using both super() and super in a constructor.

------ super() vs. super ----> super() method vs super keyword ---> ** imp topic for exam
    super() and super are quite different but may be used in the same methods.
    The first, super(), is a statement that explicitly calls a parent constructor and may only be used in the first line of a constructor of a child class. 
    The second, super, is a keyword used to reference a member defined in a parent class and may be used throughout the child class, means even after first line or second line.
        
---- Inheriting Methods --> brings the stage for collisions between methods defined in both the parent class and the child class.   
    Lets discuss rules for method inheritance and how Java handles such scenarios.
    --- Overriding a Method --> means, a same method name and definition in both the parent and child class.
            When you override a method, you may reference the parent version of the method using the super keyword. In this manner, the keywords this and super allow you to select between the child and parent version of a method, respectively.
    
     -->   Rules, The compiler performs the following checks when you override a non-private method: -->
    1. The method in the child class must have the same signature as the method in the parent class.
    2. The method in the child class must be at least as accessible or more accessible than the method in the parent class.
    3. The method in the child class may not throw a checked exception that is new or broader than the class of any exception thrown in the parent class method. In other words, a child method may hide or eliminate a parent method’s exception without issue.
    4. If the method in the child class returns a value, it must be the same or a subclass of the method in the parent class, known as covariant return types.
    
    ---> A recursive function is one that calls itself as part of execution, also it must have a termination condition to avoid infinite loop. in case of infinite loop, java throws/ produce a stack overflow error at runtime.
    
    --- overloading vs overriding ----> If two methods have the same name but different signatures, the methods are overloaded, not overridden.
        overload --> Different signature for same method name.
        override --> same signature for same name method, with few addional rules listed above.
     --- tips for exam -->
        Any time you see a method on the exam with the same name as a method in the parent class, determine whether the method is being overloaded or overridden first; doing so will help you with questions about whether the code will compile.
    
  ----- Redeclaring private Methods --> it is not possible to override a private method of a parent class since the parent method is not accessible from the child class. but it doesn’t mean that the child class can’t define its own version of the method. It just means, that the new method is not an overridden version of the parent class’s method. so, none of the rules for overriding methods are invoked.
    
  ---- Hiding Static Methods --> A hidden method occurs when a child class defines a static method with the same name and signature as a static method defined in a parent class.
    hidden method follow all 4 rules of overridden method, plus additional one rule:
    5. The method defined in the child class must be marked as static if it is marked as static in the parent class (method hiding). Likewise, the method must not be marked as static in the child class if it is not marked as static in the parent class (method overriding).
    For nonprivate methods in the parent class and child class, both methods must use static (hide) or neither should use static (override).

    Note:- You should not reuse the name of a static method in your class if it is already used in the parent class. To avoid compile errors.

 ------ Overriding vs. Hiding Methods --->
    overriding a method --> a child method replaces the parent method in calls defined in both the parent and child.
          At runtime the child version of an overridden method is always executed for an instance regardless of whether the method call is defined in a parent or child class method.
          In this manner, the parent method is never used unless an explicit call to the parent method is referenced, using the syntax ParentClassName.method().
    hidden methods --> only replace parent methods in the calls defined in the child class.
        Alternatively, at runtime the parent version of a hidden method is always executed if the call to the method is defined in the parent class.
    Summary --> Override method call --> 
       1. parent method call for overridden method only when an explicit call to the parent method is referenced, using the syntax ParentClassName.method().
       2. child method call for overridden method always regardless of call from parent or child class. as method is overridden.
       3. parent method call for hidden method when call is from parent class, because of static keyword.
       4. child method call for  hidden method when call is from child class, because of static keyword.
    
 ----- Creating final methods ---> one more rule: final methods cannot be overridden.
    This rule is in place both when you override a method and when you hide a method.
    In other words, you cannot hide a static method in a parent class if it is marked as final.    
---- Why Mark a Method as final? ---> prevents them from being overridden
   In short, the final modifier is only used on methods when the author of the parent method wants to guarantee very precise behavior.
   
----- Inheriting Variables ---> Java doesn’t allow variables to be overridden but instead allow to be hidden.
    --- Hiding Variables --> When you hide a variable, you define a variable with the same name as a variable in a parent class. This creates two copies of the variable within an instance of the child class: one instance defined for the parent reference and another defined for the child reference.
    there is no concept of overriding a member variable. 
    super keyword is used to access the parent variable’s value.
    These rules are the same regardless of whether the variable is an instance variable or a static variable.
    Notice if the same type of object was created then, the reference to the object determines which value is seen as output. This concept is only valid for variables as they are not overridden.

----- Creating Abstract Classes ---> 
    Abstract Class --> is a class that is marked with the abstract keyword and cannot be instantiated.
    An abstract method --> is a method marked with the abstract keyword defined in an abstract class, for which no implementation is provided in the class in which it is declared.

---- Default Method Implementations in Abstract Classes ---> you can still define a method with a body—you just can’t mark it as abstract.

    Abstract Class Definition Rules:
        1. Abstract classes cannot be instantiated directly.
        2. Abstract classes may be defined with zero or more, of abstract and nonabstract methods.
        3. Abstract classes may not be marked as private or final.
        4. An abstract class that extends another abstract class inherits all of its abstract methods as its own abstract methods.
        5. The first concrete class that extends an abstract class must provide an implementation for all of the inherited abstract methods.
    Abstract Method Definition Rules:
        1. Abstract methods may only be defined in abstract classes.
        2. Abstract methods may not be declared private or final.
        3. Abstract methods must not provide a method body/implementation in the abstract class for which is it declared.
        4. Implementing an abstract method in a subclass follows the same rules for overriding a method. For example, the name and signature must be the same, and the visibility of the method in the subclass must be at least as accessible as the method in the parent class.
        
  ----- Creating a Concrete Class --> A concrete class is the first non-abstract subclass that extends an abstract class and is required to implement all inherited abstract methods.
    
---- extending an abstract class with another abstract --->
    An abstract class can extend another abstract class, and may or may not implement abstract methods of the extended class.
    But if an intermediate class provides an implementation for an abstract method, that method is inherited by subclasses as a concrete method, not as an abstract one.

------- Implementing Interfaces --> Java does allow classes to implement any number of interfaces. each separated by a comma.
    An interface is of abstract type that defines a list of abstract public methods that any class implementing the interface must provide. An interface can also include a list of constant variables and default methods.
    An interface is defined with the interface keyword. 
    A class invokes the interface by using the implements keyword in its class definition.
    
Note that, 
1. abstract and public keyword assumed for method definitions in interface.
2. public, static, final keywords are assumed while defining a variable in interface.

** New to Java 8 is the notion of default and static interface methods.

** imp for exam ------ Defining an Interface --> specialized kind of abstract class. Below are rules:
    1. Interfaces cannot be instantiated directly.
    2. An interface is not required to have any methods.
    3. An interface may not be marked as private or final.
    4. All top-level interfaces are assumed to have public or default access, and they must include the abstract modifier in their definition. Therefore, marking an interface as private, protected, or final will trigger a compiler error, since this is incompatible with these assumptions.
    5. All non-default methods in an interface are assumed to have the modifiers abstract and public in their definition. Therefore, marking a method as private, protected, or final will trigger compiler errors as these are incompatible with the abstract and public keywords.
    
----- Inheriting an Interface --> means one interface extends another interface  
1. An interface that extends another interface, as well as an abstract class that implements an interface, inherits all of the abstract methods as its own abstract methods.
2. The first concrete class that implements an interface, or extends an abstract class that implements an interface, must provide an implementation for all of the inherited abstract methods.
    
 abstract class vs interface --->
1. Like an abstract class, an interface may be extended using the extend keyword. In this manner, the new child interface inherits all the abstract methods of the parent interface.
2. Unlike an abstract class, though, an interface may extend multiple interfaces.
3. An abstract class always extends a concrete class ( java.lang.Object at the very least). So it works the same as it always does. If you want to instantiate it, you will have to subclass it with a concrete implementation of those abstract methods and instantiate it through the concrete class. Just like you always do.

------- Classes, Interfaces, and Keywords ---> 
    A class can implement an interface, a class cannot extend an interface.
    Whereas, an interface can extend another interface, an interface cannot implement another interface.
    Also, An interface cannot extend or implement a class.

------- Abstract Methods and Multiple Inheritance -->
   points to remember --> Scenario: what will happen if a class that inherits from two interfaces that contain the same abstract method:
        1. If only the abstract method name is same in both the interfaces, then one definition would be enough for both, in the concrete class and code will compile.
        2. If the method name is the same but the input parameters are different, there is no conflict because this is considered a method overload.
        3. if the method name and input parameters are the same but the return types are different between the two methods, the class or interface attempting to inherit both interfaces will not compile. Even, if we implement one method definition then also compiler will complain as it is missing other method definition.
        3.2 - The compiler would also throw an exception if you define an interface or abstract class that inherits from two conflicting interfaces. Even without implementation details, the compiler detects the problem with the abstract definition and prevents compilation.
   ---- things work a bit differently with default interface methods. Discussed below: ---
   

----- Interface Variables ---->  two interface variables rules:
    1. Interface variables are assumed to be public, static, and final. Therefore, marking a variable as private or protected will trigger a compiler error, as will marking any variable as abstract.
    2. The value of an interface variable must be set when it is declared since it is marked as final.
  Hence, point to understand -->
   1. interface variables are essentially constant variables defined on the interface level.
   2. they are assumed to be static, they are accessible even without an instance of the interface.
   3. it is a common coding practice to use uppercase letters to denote constant variable names within a class.
   
------ Default Interface Methods ---> (introduced in Java 8)
   Is a method with the default keyword in which a method body is provided, means default implementation. Contrast to abstract methods, which do not have method body. classes have the option to override the default method if they need to, but they are not required to do so.
   Note that methods are assumed to be public, as all methods of an interface are public.
       Below is an example of definition:-
            public interface IsWarmBlooded {
            boolean hasScales();
            public default double getTemperature() { // Note "public" as modifier and "default" as keyword for defining default method
            return 10.0;
            }
            }
    
    Default method rules -->
        1. A default method may only be declared within an interface and not within a class or abstract class.
        2. A default method must be marked with the default keyword. If a method is marked as default, it must provide a method body.
        3. A default method is not assumed to be static, final, or abstract, as it may be used or overridden by a class that implements the interface.
        4. Like all methods in an interface, a default method is assumed to be public and will not compile if marked as private or protected.

------ Default Methods and Multiple Inheritance ---->
     1. If a class implements two interfaces that have default methods with the same name and signature, the compiler will throw an error. There is an exception to this rule, though: if the subclass overrides the duplicate default methods, the code will compile without issue—the ambiguity about which version of the method to call has been removed.
    2. This rule holds true even for abstract classes that implement multiple interfaces, because the default method could be called in a concrete method within the abstract class. 
     
------ Static Interface Methods ----> (introduced in Java 8) rules:
    1. Like all methods in an interface, a static method is assumed to be public and will not compile if marked as private or protected.
    2. To reference the static method, a reference to the name of the interface must be used.
    3. A static method defined in an interface is not inherited in any classes that implement the interface.
    4. a class that implements two interfaces containing static methods with the same signature will still compile at runtime, because the static methods are not inherited by the subclass and must be accessed with a reference to the interface name.
    
------ Understanding Polymorphism ----> the property of an object to take on many different forms.
    a Java object may be accessed using a reference:
        1. with the same type as the object
        2. a reference that is a superclass of the object
        3. a reference that defines an interface the object implements, either directly or through a superclass.
   Hence, a cast is not required if the object is being reassigned to a super type or interface of the object.
  The ability of an instance of a class to be passed as an instance of an interface it implements, as well as an instance of one of its superclasses, is the nature of polymorphism.
  Note:-- Once the object has been assigned a new reference type, only the methods and variables available to that reference type are callable on the object without an explicit cast.
  
---- Object vs. Reference -->  
     In Java, all objects are accessed by reference, you never have direct access to the object itself.
     Object --> The entity that exists in memory, allocated by the Java runtime environment.
            --> Regardless of the type of the reference for the object in memory, the object itself doesn’t change.
            
     the following two rules:
        1. The type of the object determines which properties exist within the object in memory.
        2. The type of the reference to the object determines which methods and variables are accessible to the Java program.       
            
    ------ Casting Objects --> Rules:-
    1. Casting an object from a subclass to a superclass doesn’t require an explicit cast.
    2. Casting an object from a superclass to a subclass requires an explicit cast. if permitted, means when object is of subclass.
    3. The compiler will not allow casts to unrelated types.
    4. Even when the code compiles without issue, an exception may be thrown at runtime if the object being cast is not actually an instance of that class.
  
--- Virtual Methods -->  most important feature of polymorphism
    Is a method in which the specific implementation is not determined until runtime.
    In fact, all non-final, non-static, and non-private Java methods are considered virtual methods, since any of them can be overridden at runtime.
    --- virtual method special in Java ---->
        If you call a method on an object that overrides a method, you get the overridden method, even if the call to the method is on a parent reference or within the parent class.

----- Polymorphic Parameters --->
    The most useful applications of polymorphism is the ability to pass instances of a subclass or interface to a method as an aurgument.
    For example, you can define a method that takes an instance of an interface as a parameter.
    In this manner, any class that implements the interface can be passed to the method. Since you’re casting from a subtype to a supertype, an explicit cast is not required. This property is referred to as polymorphic parameters.
    
Points to remember --->
    1. java.util.List is an interface, not a class.
    2. java.util.ArrayList and java.util.Vector, are classes that implements List interface.
    example:-->  java.util.List list = new java.util.ArrayList();
     
----- Polymorphism and Method Overriding -->   same 3 last rules of overridding a method:
    1. An overridden method (in child class) must be at least as accessible as the method (in parent class) it is overriding.
    2. a subclass cannot declare an overridden method with a new or broader exception than in the superclass, since the method may be accessed using a reference to the superclass.
    3. overridden methods must use covariant return types for the same kinds of reasons as just discussed. If an object is cast to a superclass reference and the overridden method is called, the return type must be compatible with the return type of the parent method. If the return type in the child is too broad, it will result an inherent cast exception when accessed through the superclass reference.

Notes from Review Questions ---> 

All interface methods are implicitly public
Interface methods may be declared as static or default but are never implicitly added, means has to be declared explicitely.
A tricky one, because prior to Java 8 all interface methods would be assumed to be abstract. Since Java 8 now includes default and static methods and they are never abstract, you cannot assume the abstract modifier will be implicitly applied to all methods by the compiler.
A reference to a class object created can be same class or any class or interface that is a supertype of that specific class. 
static methods cannot be overridden, only hidden.
private methods are always hidden in a subclass.
In an interface, variables may only be hidden, regardless of the access modifier.
When an interface or abstract class has an abstract method, which is not implemented by concrete class then compiler will through error at the line of concrete class definition (where, it extends abstract class or implements interface).
Polimorphism concept --> A method that takes a parameter with type java.lang.Object will take any reference.
An Interface can define static or default method if it provides method body as well. 
Otherwise, if method is non-static or non-default then method body not needed.
An Interface variable assumed to have public and static and final in its definition.
An Interface can have public or default access modifier.
All method of interface assumed to be public and abstract. 
There is no default access modifier for method in interface, means all are implicitly public.
An abstract class may contain concrete methods.
Since Java 8, interfaces may also contain concrete methods in form of static or default methods. 
Although all variables in interfaces are assumed to be public static final, abstract classes may contain them as well.
Both abstract classes and interfaces can be extended with the extends keyword.
Only interfaces can contain default methods.
Both abstract classes and interfaces can contain static methods.
Both cann't be instantiated directly.
interface doesn't inherits java.lang.Object class. because, interface can extends only other interfaces and not classes. Though an instance of an object that implements an interface inherits java.lang.Object. Otherwise, Java would support multiple inheritance for objects, which it doesn’t.
why we can see Objects class methods in interface because, An interface implicitly declared one method for each public method in Object. Thus the equals method is implicitly declared as a member in an interface (unless it already inherits it from a superinterface).
Interface variables can never be abstract.
a superclass may have already implemented an inherited interface, so the
concrete subclass would not need to implement the method. Concrete classes can be both final and not final.
Its possible to have main method in abstract class.
Its possible to create object of concrete class in abstract class and reference by abstract class to access members of abstract class. because in this case abstract class is parent and concrete class in child, and you can have object of child that can be referenced by parent rereference variable.
Its not possible to override a method that has final keyword in its definition.
Abstract methods cannot contain a body, not even empty body ({}). Code won't compile in such case.
An override method with same name and signature but different return type should follow covariant rule. Means, overridden method return type should be child or compatible with the actual method return type.
A null value can always be passed as an object value, regardless of type.
Since, Java.lang.Object is parent of all class and not child. It can't be passed as object value in child class. But it can be referenced for any child class object.


















Result of Review Questions Attempt 1 -->
1. B, E (N)
2. E
3. A, D, E (N)
4. C, E
5. A, D, E, F
6. B (N)
7. B, C 
8. A (N)
9. A
10. B, D, E, F, G (N)
11. A, D, E
12. B
13. A
14. C 
15. B, c (N)
16. c (N)
17. c (N)
18. E
19. A, C, D (N)
20. A


Attempt - 2 ---->
ch - 5 -->
1. B -- remember (public modifier can be applied implicitely, but abstract modifier can be applied only when no method definition is given and default modifier can be applied only when method definition is written while creating method)
2. B (N) -- need to understand constructor more precisely
3. A, B, D, E
4. C, E
5. A, D, F (N) 
6. B (N)
7. A, B (N)
8. C, D, F (N)
9. B (N)
10. B, C, D, F, G (N)
11. A, D, E
12. A (N) -- nice tricky question -- need to understand concept carefully -- 
13. A
14. B, C (N)
15. B, D (N)
16. E -- Need to understand everyline of code and its concepts
17. C (N)
18. E
19. A, C, D, F (N) -- remember, only subclass can be used, here Object is a superclass of Snake, not a subclass, so it also cannot be used
20. A
