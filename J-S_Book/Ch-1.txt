An object is a runtime instance of a class in memory
Objects of classes represents state of program. (Need more understanding on this statement)
Variables hold the state of the program, and methods operate on that state.
The keyword static binds a method to its class so it can be called by just the class name, as in, for example, Zoo.main().
An array is a fixed-size list of items that are all of the same type.

Java compiler compiles ".java" files and create ".class" file.
JVM runs that ".class" files. JVM is responsible for executing the java program line by line hence it is also known as interpreter.
JRE - provides the minimum requirements for executing a Java application; includes JVM, core class, and supporting files
JDK - includes JRE, Java interpreter, Javac (compiler), javadoc (for documentation), jar (archiver), other tools for java dev.

Declaring multiple variables --
You can also declare and initialize multiple variables in the same statement. Same data type variable can be in same statement.
declare means just defining which type of variable it is.
initialize means assigning a value to the variable.

three rules to remember for legal identifiers:
■ The name must begin with a letter or the symbol $ or _.
■ Subsequent characters may also be numbers.
■ You cannot use the same name as a Java reserved word.
valid letters in Java are not just characters in the English alphabet. Java supports the Unicode character set, so there are more than 45,000 characters that can start a legal Java identifier.

Local Variable -->
local variable is a variable defi ned within a method. Local variables must be initialized before use. They do not have a default value and compiler will not let you read an uninitialized value.

Instance and Class Variables -->
Variables that are not local variables are known as instance variables or class variables.
Instance variables are also called fields. Class variables are shared across multiple objects.
A variable is a class variable if it has the static keyword in its declaration.

Instance and class variables do not require you to initialize them. As soon as you declare these variables, they are given a default value.
Variable_type --> Default initialization value
boolean --> false
byte, short, int, long --> 0 (in the type’s bit-length)
float, double --> 0.0 (in the type’s bit-length)
char --> '\u0000' (NUL)
All object references (everything else) --> null

The rules on scope of variables:-
■ Local variables—in scope from declaration to end of block
■ Instance variables—in scope from declaration until object garbage collected
■ Class variables—in scope from declaration until program ends

Imp -->
multiple classes can be defined in a file, but only one of them is allowed to be public. The public class matches the name of the file.
A file is also allowed to have neither class be public.

Garbage Collection:
Garbage collection refers to the process of automatically freeing memory on the heap by deleting objects that are no longer reachable in your program.
An object is no longer reachable when one of two situations occurs:
■ The object no longer has any references pointing to it.
■ All references to the object have gone out of scope.

Objects vs. References -->
The reference is a variable that has a name and can be used to access the contents of an object. A reference can be assigned to another reference, passed to a method, or returned from a method. All references are the same size, no matter what their type is.

An object sits on the heap and does not have a name. Therefore, you have no way to access an object except through a reference. Objects come in all different shapes and sizes and consume varying amounts of memory. An object cannot be assigned to another object, nor can an object be passed to a method or returned from a method. It is the object that gets garbage collected, not its reference.

finalize()
Java allows objects to implement a method called finalize() that might get called. This method gets called if the garbage collector tries to collect the object. If the garbage collector doesn’t run, the method doesn’t get called. If the garbage collector fails to collect the object and tries to run it again later, the method doesn’t get called a second time.
Just keep in mind that it might not get called and that it defi nitely won’t be called twice.

Benefits of Java -->
Object Oriented Programming --> means code is defined in classes and classes can be instantiated by objects
Encapsulation --> Java supports access modifi ers to protect data from unintended access and modification. 
Platform Independent --> compile once and run in all OS.
Robust --> prevents memory leaks, using garbage collection
Simple --> In addition to eliminating pointers, it got rid of operator overloading.
Secure --> Java code runs inside the JVM. Hence, less harmfull.

Review Question Attempt 1 -->
  
