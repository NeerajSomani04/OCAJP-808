An object is a runtime instance of a class in memory
Objects of classes represents state of program. (Need more understanding on this statement)

Variables hold the state of the program, and methods operate on that state.
A variable stores that change, means state of the program. A method is an operation that can be called.

A JAR file is like a zip file of mainly Java class files.

An array is a fixed-size list of items that are all of the same type.

Java Classes --> multiple classes allowed, at most one of the classes in the file is allowed to be public and it needs to match the filename else code wouldn't compile.

-- Writing a main() Method --> Java program begins execution with its main() method.
  A main() method is the gateway between the startup of a Java process and the beginning of the programmer’s code. 
  JVM manage this and calls the underlying system to allocate memory and CPU time, access files, and so on.
  The main() method lets us hook our code into this process.
The keyword static binds a method to its class so it can be called by just the class name, as in, for example, Zoo.main(). Java doesn’t need to create an object to call the main() method, In fact, the JVM does this.

Java compiler compiles ".java" files and create ".class" file.
JVM runs that ".class" files. JVM is responsible for executing the java program line by line hence it is also known as interpreter.
JRE - provides the minimum requirements for executing a Java application; includes JVM, core class, and supporting files
JDK - includes JRE, Java interpreter, Javac (compiler), javadoc (for documentation), jar (archiver), other tools for java dev.

-- The rules for what a Java code file contains:-
    -- Each file can contain multiple classes but only one public class.
    -- The filename must match the public class name, including case, and have a .java extension.

Below command To compile java code -->
  javac Zoo.java // this will compile Zoo class and creates Zoo.class file
  java Zoo "San Diago" Tiger // this command runs Zoo class and pass two aurguments to the class. space between words seperates the aurguments and double qutation helps to pass space within one aurgument. 

--- Package Declarations and Imports -->
Java puts classes in packages. These are logical groupings for classes.
Import statements tell Java which packages to look in for classes.
The rule for package names is that they are mostly letters or numbers separated by dots.
importing many classes using "*" wildcard symbol doesn't slow down process, as comipler handles what is needed in program.
java.lang. This package is special in that it is automatically imported.

-- some imports that don’t work ---
import java.nio.*; // NO GOOD – a wildcard only matches //class names, not "file.*Files"
import java.nio.*.*; // NO GOOD – you can only have one wildcard //and it must be at the end
import java.nio.files.Paths.*; // NO GOOD – you cannot import methods //only class names

--- When the same class is found in multiple packages, Java gives you the compiler error. example:- 
import java.util.Date;
import java.sql.Date; // DOES NOT COMPILE
One way to resolve this issue, If you explicitly import a class name, it takes precedence over any wildcards present.
import java.util.Date; import java.sql.*;

If there is really a need to use two classes with the same name then either import only one or don't import any of these and use fully qualified name while using within class. Example:- 
import java.util.Date;
public class Conflicts { Date date;
java.sql.Date sqlDate;}

-- imp for exam --> if code starts with line 1 in exam then make sure about import statement, class declaration, etc.
  if its doesn't start with line 1 then, follow as per instruction of question
  
Constructors --> To create an instance of a class, write new before it. For example: Random r = new Random();
    This gives Java a place to store a reference to the object.
A constructor, is a special type of method that creates a new object. 
Two key points, the name of the constructor matches the name of the class, and there’s no return type.
The purpose of a constructor is to initialize fields.
If you don't define constructor, then the compiler will supply a “do nothing” default constructor for you.

Instance Initializer Blocks --> code blocks appear outside a method, The code between the braces ({}) is called a code block.
-- Order of Initialization -->
  Fields and instance initializer blocks are run in the order in which they appear in the file
  The constructor runs after all fields and instance initializer blocks have run.

-- Distinguishing Between Object References and Primitives --> 
Primitive Types --> eight built-in data types. (boolean, byte, short, int, long, float, double, char)
-- a byte can hold a value from –128 to 127. A byte is 8 bits. A bit has two possible values (0 or 1).
-- The number of bits is used by Java when it figures out how much memory to reserve for your variable.


Declaring multiple variables --
You can also declare and initialize multiple variables in the same statement. Same data type variable can be in same statement.
declare means just defining which type of variable it is.
initialize means assigning a value to the variable.

three rules to remember for legal identifiers:
■ The name must begin with a letter or the symbol $ or _.
■ Subsequent characters may also be numbers.
■ You cannot use the same name as a Java reserved word.
valid letters in Java are not just characters in the English alphabet. Java supports the Unicode character set, so there are more than 45,000 characters that can start a legal Java identifier.

Local Variable -->
local variable is a variable defi ned within a method. Local variables must be initialized before use. They do not have a default value and compiler will not let you read an uninitialized value.

Instance and Class Variables -->
Variables that are not local variables are known as instance variables or class variables.
Instance variables are also called fields. Class variables are shared across multiple objects.
A variable is a class variable if it has the static keyword in its declaration.

Instance and class variables do not require you to initialize them. As soon as you declare these variables, they are given a default value.
Variable_type --> Default initialization value
boolean --> false
byte, short, int, long --> 0 (in the type’s bit-length)
float, double --> 0.0 (in the type’s bit-length)
char --> '\u0000' (NUL)
All object references (everything else) --> null

The rules on scope of variables:-
■ Local variables—in scope from declaration to end of block
■ Instance variables—in scope from declaration until object garbage collected
■ Class variables—in scope from declaration until program ends

Imp -->
multiple classes can be defined in a file, but only one of them is allowed to be public. The public class matches the name of the file.
A file is also allowed to have neither class be public.

Garbage Collection:
Garbage collection refers to the process of automatically freeing memory on the heap by deleting objects that are no longer reachable in your program.
An object is no longer reachable when one of two situations occurs:
■ The object no longer has any references pointing to it.
■ All references to the object have gone out of scope.

Objects vs. References -->
The reference is a variable that has a name and can be used to access the contents of an object. A reference can be assigned to another reference, passed to a method, or returned from a method. All references are the same size, no matter what their type is.

An object sits on the heap and does not have a name. Therefore, you have no way to access an object except through a reference. Objects come in all different shapes and sizes and consume varying amounts of memory. An object cannot be assigned to another object, nor can an object be passed to a method or returned from a method. It is the object that gets garbage collected, not its reference.

finalize()
Java allows objects to implement a method called finalize() that might get called. This method gets called if the garbage collector tries to collect the object. If the garbage collector doesn’t run, the method doesn’t get called. If the garbage collector fails to collect the object and tries to run it again later, the method doesn’t get called a second time.
Just keep in mind that it might not get called and that it defi nitely won’t be called twice.

Benefits of Java -->
Object Oriented Programming --> means code is defined in classes and classes can be instantiated by objects
Encapsulation --> Java supports access modifi ers to protect data from unintended access and modification. 
Platform Independent --> compile once and run in all OS.
Robust --> prevents memory leaks, using garbage collection
Simple --> In addition to eliminating pointers, it got rid of operator overloading.
Secure --> Java code runs inside the JVM. Hence, less harmfull.

Review Question Attempt 1 -->
  1. A, B, E 
2. A (N)
3. B, D, E
4. A, B 
5. C, D 
6. E 
7. A (N)
8. B, E (N)
9. A, C, D, E 
10. E, D (N)
11. C, D
12. C (N)
13. A, D 
14. B, D (N)
15. A, E
16. B, C (N)
17. A, E 
18. C, D, E
19. B (N)
20. C, E (N)
21. A
22. B, E
23. C (N)
